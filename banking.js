const fs = require("fs-extra");
const path = require("path");

module.exports.config = {
    name: "banking",
    version: "2.0.0",
    hasPermssion: 0,
    credits: "Kenne400k && Nnam mod",
    description: "Ng√¢n h√†ng ·∫£o (n√¢ng c·∫•p: vay n·ª£, l√£i su·∫•t, l·ªãch s·ª≠ giao d·ªãch)",
    commandCategory: "Economy",
    usages: "bank [balance|deposit|withdraw|transfer|loan|top|history]",
    cooldowns: 3
};

const dataPath = path.join(__dirname, "banking_data");
if (!fs.existsSync(dataPath)) fs.mkdirSync(dataPath);

function getUserData(userID) {
    const file = path.join(dataPath, `${userID}.json`);
    if (!fs.existsSync(file)) {
        fs.writeFileSync(file, JSON.stringify({ balance: 0, loan: 0, history: [] }, null, 2));
    }
    return JSON.parse(fs.readFileSync(file));
}

function saveUserData(userID, data) {
    const file = path.join(dataPath, `${userID}.json`);
    fs.writeFileSync(file, JSON.stringify(data, null, 2));
}

function addHistory(userID, type, amount, note = "") {
    const data = getUserData(userID);
    data.history.unshift({ type, amount, date: new Date().toISOString(), note });
    data.history = data.history.slice(0, 50); // Gi·ªØ 50 giao d·ªãch g·∫ßn nh·∫•t
    saveUserData(userID, data);
}

module.exports.run = async function({ api, event, args, Users }) {
    const { threadID, messageID, senderID } = event;
    const name = await Users.getNameUser(senderID);
    const data = getUserData(senderID);
    const cmd = args[0]?.toLowerCase();

    switch (cmd) {
        case "balance":
        case "s·ªë d∆∞":
            return api.sendMessage(`üí∞ S·ªë d∆∞ c·ªßa ${name}: ${data.balance.toLocaleString()} VNƒê\nü™ô N·ª£: ${data.loan.toLocaleString()} VNƒê (L√£i: ${data.loan * 0.05} VNƒê/ng√†y)`, threadID, messageID);

        case "deposit":
        case "n·∫°p":
            const depositAmt = parseInt(args[1]);
            if (isNaN(depositAmt) || depositAmt <= 0) return api.sendMessage("S·ªë ti·ªÅn n·∫°p ph·∫£i > 0!", threadID, messageID);
            data.balance += depositAmt;
            addHistory(senderID, "deposit", depositAmt, "N·∫°p ti·ªÅn");
            saveUserData(senderID, data);
            return api.sendMessage(`‚úÖ ƒê√£ n·∫°p ${depositAmt.toLocaleString()} VNƒê. S·ªë d∆∞ m·ªõi: ${data.balance.toLocaleString()} VNƒê`, threadID, messageID);

        case "withdraw":
        case "r√∫t":
            const withdrawAmt = parseInt(args[1]);
            if (isNaN(withdrawAmt) || withdrawAmt <= 0 || withdrawAmt > data.balance) return api.sendMessage("S·ªë ti·ªÅn r√∫t kh√¥ng h·ª£p l·ªá ho·∫∑c v∆∞·ª£t s·ªë d∆∞!", threadID, messageID);
            data.balance -= withdrawAmt;
            addHistory(senderID, "withdraw", -withdrawAmt, "R√∫t ti·ªÅn");
            saveUserData(senderID, data);
            return api.sendMessage(`‚úÖ ƒê√£ r√∫t ${withdrawAmt.toLocaleString()} VNƒê. S·ªë d∆∞ m·ªõi: ${data.balance.toLocaleString()} VNƒê`, threadID, messageID);

        case "transfer":
        case "chuy·ªÉn":
            const targetID = args[1];
            const transferAmt = parseInt(args[2]);
            if (!targetID || isNaN(transferAmt) || transferAmt <= 0 || transferAmt > data.balance) return api.sendMessage("C√∫ ph√°p: bank transfer <ID> <s·ªë ti·ªÅn>", threadID, messageID);
            const targetData = getUserData(targetID);
            data.balance -= transferAmt;
            targetData.balance += transferAmt;
            addHistory(senderID, "transfer_out", -transferAmt, `Chuy·ªÉn cho ${targetID}`);
            addHistory(targetID, "transfer_in", transferAmt, `Nh·∫≠n t·ª´ ${senderID}`);
            saveUserData(senderID, data);
            saveUserData(targetID, targetData);
            const targetName = await Users.getNameUser(targetID);
            return api.sendMessage(`‚úÖ ƒê√£ chuy·ªÉn ${transferAmt.toLocaleString()} VNƒê cho ${targetName}. S·ªë d∆∞ m·ªõi: ${data.balance.toLocaleString()} VNƒê`, threadID, messageID);

        case "loan":
        case "vay":
            const loanAmt = parseInt(args[1]);
            if (isNaN(loanAmt) || loanAmt <= 0) return api.sendMessage("S·ªë ti·ªÅn vay ph·∫£i > 0!", threadID, messageID);
            if (data.loan > 0) return api.sendMessage("B·∫°n ƒëang c√≥ n·ª£ ch∆∞a tr·∫£! Tr·∫£ n·ª£ tr∆∞·ªõc.", threadID, messageID);
            data.balance += loanAmt;
            data.loan = loanAmt;
            addHistory(senderID, "loan", loanAmt, "Vay ti·ªÅn (l√£i 5%/ng√†y)");
            saveUserData(senderID, data);
            return api.sendMessage(`‚úÖ ƒê√£ vay ${loanAmt.toLocaleString()} VNƒê (l√£i 5%/ng√†y). S·ªë d∆∞ m·ªõi: ${data.balance.toLocaleString()} VNƒê`, threadID, messageID);

        case "repay":
        case "tr·∫£ n·ª£":
            if (data.loan === 0) return api.sendMessage("B·∫°n kh√¥ng c√≥ n·ª£!", threadID, messageID);
            const interest = Math.round(data.loan * 0.05); // L√£i 5%
            const totalRepay = data.loan + interest;
            if (data.balance < totalRepay) return api.sendMessage(`S·ªë d∆∞ kh√¥ng ƒë·ªß! C·∫ßn ${totalRepay.toLocaleString()} VNƒê (g·ªëc + l√£i ${interest.toLocaleString()})`, threadID, messageID);
            data.balance -= totalRepay;
            data.loan = 0;
            addHistory(senderID, "repay", -totalRepay, "Tr·∫£ n·ª£ (g·ªëc + l√£i)");
            saveUserData(senderID, data);
            return api.sendMessage(`‚úÖ ƒê√£ tr·∫£ n·ª£ ${totalRepay.toLocaleString()} VNƒê (g·ªëc ${data.loan} + l√£i ${interest}). S·ªë d∆∞ m·ªõi: ${data.balance.toLocaleString()} VNƒê`, threadID, messageID);

        case "top":
            const allUsers = fs.readdirSync(dataPath).map(f => path.parse(f).name);
            const richList = allUsers.map(id => ({ id, ...getUserData(id), net: getUserData(id).balance - getUserData(id).loan }))
                .sort((a, b) => b.net - a.net)
                .slice(0, 10);
            let topMsg = "üèÜ TOP 10 GI√ÄU NH·∫§T:\n\n";
            for (let i = 0; i < richList.length; i++) {
                const uname = await Users.getNameUser(richList[i].id);
                topMsg += `${i+1}. ${uname} (ID: ${richList[i].id})\nüí∞ T√†i s·∫£n r√≤ng: ${(richList[i].net).toLocaleString()} VNƒê\n\n`;
            }
            return api.sendMessage(topMsg, threadID, messageID);

        case "history":
        case "l·ªãch s·ª≠":
            if (data.history.length === 0) return api.sendMessage("Ch∆∞a c√≥ giao d·ªãch n√†o!", threadID, messageID);
            let histMsg = "üìú L·ªäCH S·ª¨ GIAO D·ªäCH (5 g·∫ßn nh·∫•t):\n\n";
            for (let h of data.history.slice(0, 5)) {
                const date = new Date(h.date).toLocaleString('vi-VN');
                histMsg += `‚Ä¢ ${date}: ${h.type} ${h.amount.toLocaleString()} VNƒê - ${h.note}\n`;
            }
            return api.sendMessage(histMsg, threadID, messageID);

        default:
            return api.sendMessage(
                `üè¶ NG√ÇN H√ÄNG ·∫¢O\n\n` +
                `S·ªë d∆∞: ${data.balance.toLocaleString()} VNƒê | N·ª£: ${data.loan.toLocaleString()} VNƒê\n\n` +
                `L·ªánh:\n‚Ä¢ bank balance - Xem s·ªë d∆∞\n‚Ä¢ bank deposit <s·ªë> - N·∫°p ti·ªÅn\n‚Ä¢ bank withdraw <s·ªë> - R√∫t ti·ªÅn\n‚Ä¢ bank transfer <ID> <s·ªë> - Chuy·ªÉn ti·ªÅn\n‚Ä¢ bank loan <s·ªë> - Vay ti·ªÅn\n‚Ä¢ bank repay - Tr·∫£ n·ª£\n‚Ä¢ bank top - Top gi√†u\n‚Ä¢ bank history - L·ªãch s·ª≠`,
                threadID, messageID
            );
    }
};
