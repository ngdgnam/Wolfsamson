const moment = require("moment-timezone");
const fs = require("fs-extra");
const axios = require("axios");
const path = require("path");

module.exports.config = {
    name: "ketnoi",
    version: "1.4.0",
    hasPermssion: 0,
    credits: "D≈©ngkon - Fix & File by Copilot & Grok ( mod l·∫°i b·ªüi Nnam )",
    description: "K·∫øt n·ªëi 2 nh√≥m chat v·ªõi nhau qua bot, h·ªó tr·ª£ g·ª≠i file/·∫£nh/√¢m thanh/video/GIF, ph√¢n trang danh s√°ch nh√≥m",
    commandCategory: "Ti·ªán √≠ch",
    usages: "ketnoi [ketthuc]",
    cooldowns: 10
};

const ketNoiData = new Map(); // L∆∞u tr·∫°ng th√°i k·∫øt n·ªëi t·∫°m th·ªùi

async function downloadAttachment(url, ext) {
    const fileName = `${Date.now()}_${Math.floor(Math.random()*9999)}.${ext}`;
    const filePath = path.join(__dirname, "cache", fileName);
    if (!fs.existsSync(path.join(__dirname, "cache"))) fs.mkdirSync(path.join(__dirname, "cache"));
    const res = await axios.get(url, { responseType: "arraybuffer" });
    await fs.writeFile(filePath, res.data);
    return filePath;
}

function renderGroupList(groupThreads, page = 1, totalPage = 1) {
    let msg = `üåê Danh s√°ch nh√≥m c√≥ th·ªÉ k·∫øt n·ªëi (Trang ${page}/${totalPage}):\n`;
    const start = (page - 1) * 10;
    const end = Math.min(start + 10, groupThreads.length);
    for (let i = start; i < end; i++) {
        const g = groupThreads[i];
        msg += `${i - start + 1}. ${g.name || "Kh√¥ng t√™n"} (ID: ${g.threadID})\n`;
    }
    msg += "\nReply s·ªë ƒë·ªÉ ch·ªçn nh√≥m mu·ªën k·∫øt n·ªëi.\n";
    if (totalPage > 1) msg += "Reply 'trang +s·ªë' (v√≠ d·ª•: trang 2) ƒë·ªÉ chuy·ªÉn trang.";
    return msg;
}

module.exports.run = async function({ api, event, args }) {
    const { threadID, senderID } = event;

    // K·∫øt th√∫c k·∫øt n·ªëi n·∫øu c√≥ l·ªánh ketnoi ketthuc
    if (args[0] && args[0].toLowerCase() === "ketthuc") {
        const data = ketNoiData.get(threadID);
        if (data && data.step === "connected" && data.pair) {
            ketNoiData.delete(threadID);
            ketNoiData.delete(data.pair);
            api.sendMessage("üîå K·∫øt n·ªëi gi·ªØa hai nh√≥m ƒë√£ ƒë∆∞·ª£c k·∫øt th√∫c!", threadID);
            if (data.pair) {
                api.sendMessage("üîå K·∫øt n·ªëi gi·ªØa hai nh√≥m ƒë√£ ƒë∆∞·ª£c k·∫øt th√∫c!", data.pair);
            }
        } else {
            api.sendMessage("‚ùå Nh√≥m n√†y kh√¥ng c√≥ k·∫øt n·ªëi n√†o ƒëang ho·∫°t ƒë·ªông!", threadID);
        }
        return;
    }

    // L·∫•y danh s√°ch nh√≥m bot ƒëang ·ªü
    const allThreads = await api.getThreadList(50, null, ["INBOX"]);
    const groupThreads = allThreads.filter(t => t.isGroup && t.threadID !== threadID);

    if (groupThreads.length === 0)
        return api.sendMessage("‚ùå Bot kh√¥ng c√≤n nh√≥m n√†o kh√°c ƒë·ªÉ k·∫øt n·ªëi!", threadID);

    const totalPage = Math.ceil(groupThreads.length / 10);
    const page = 1;

    ketNoiData.set(threadID, {
        step: "choose_group",
        groupThreads,
        requester: senderID,
        page,
        totalPage
    });

    const msg = renderGroupList(groupThreads, page, totalPage);

    return api.sendMessage(msg, threadID, (err, info) => {
        if (err) return console.error(err);
        ketNoiData.get(threadID).messageID = info.messageID;
        global.client.handleReply.push({
            name: this.config.name,
            messageID: info.messageID,
            author: senderID,
            type: "choose_group"
        });
    });
};

module.exports.handleReply = async function({ api, event, handleReply }) {
    const { threadID, senderID, body, messageID, attachments } = event;
    const data = ketNoiData.get(threadID);

    if (!data) return;

    // B∆∞·ªõc ch·ªçn nh√≥m (ph√¢n trang)
    if (data.step === "choose_group") {
        if (senderID !== handleReply.author) return;
        const groupThreads = data.groupThreads;
        const totalPage = data.totalPage;
        let page = data.page;

        // Chuy·ªÉn trang
        const trangMatch = body.toLowerCase().match(/^trang\s*(\d+)$/);
        if (trangMatch) {
            const newPage = parseInt(trangMatch[1]);
            if (isNaN(newPage) || newPage < 1 || newPage > totalPage)
                return api.sendMessage(`‚ùå Trang kh√¥ng h·ª£p l·ªá!`, threadID, messageID);

            ketNoiData.set(threadID, {
                ...data,
                page: newPage
            });
            const msg = renderGroupList(groupThreads, newPage, totalPage);
            return api.sendMessage(msg, threadID, (err, info) => {
                if (err) return console.error(err);
                ketNoiData.get(threadID).messageID = info.messageID;
                global.client.handleReply.push({
                    name: module.exports.config.name,
                    messageID: info.messageID,
                    author: senderID,
                    type: "choose_group"
                });
            });
        }

        // Ch·ªçn nh√≥m tr√™n trang hi·ªán t·∫°i
        const num = parseInt(body);
        const start = (page - 1) * 10;
        const end = Math.min(start + 10, groupThreads.length);
        if (isNaN(num) || num < 1 || num > (end - start))
            return api.sendMessage("‚ùå S·ªë kh√¥ng h·ª£p l·ªá!", threadID, messageID);

        const targetGroup = groupThreads[start + num - 1];
        ketNoiData.set(targetGroup.threadID, {
            step: "wait_accept",
            fromThread: threadID,
            fromName: (await api.getThreadInfo(threadID)).threadName,
            requester: senderID
        });
        ketNoiData.set(threadID, {
            step: "wait_reply_accept",
            targetThread: targetGroup.threadID
        });

        api.sendMessage(
            `üîó Nh√≥m "${targetGroup.name || "Kh√¥ng t√™n"}" ƒë√£ ƒë∆∞·ª£c ch·ªçn.\nƒêang g·ª≠i y√™u c·∫ßu k·∫øt n·ªëi...`,
            threadID
        );

        return api.sendMessage(
            `üîî Nh√≥m "${(await api.getThreadInfo(threadID)).threadName}" mu·ªën k·∫øt n·ªëi tr√≤ chuy·ªán qua bot!\nReply 'y' ƒë·ªÉ ƒë·ªìng √Ω, 'n' ƒë·ªÉ t·ª´ ch·ªëi.`,
            targetGroup.threadID,
            (err, info) => {
                if (err) return console.error(err);
                ketNoiData.get(targetGroup.threadID).messageID = info.messageID;
                global.client.handleReply.push({
                    name: module.exports.config.name,
                    messageID: info.messageID,
                    author: null,
                    type: "wait_accept"
                });
            }
        );
    }

    // B∆∞·ªõc ch·ªù nh√≥m target ƒë·ªìng √Ω
    if (data.step === "wait_accept") {
        if (!["y", "n"].includes(body.toLowerCase())) return;
        const fromThread = data.fromThread;
        const fromName = data.fromName;
        if (body.toLowerCase() === "y") {
            ketNoiData.set(threadID, { step: "connected", pair: fromThread });
            ketNoiData.set(fromThread, { step: "connected", pair: threadID });

            api.sendMessage(
                `‚úÖ Nh√≥m b·∫°n ƒë√£ ƒë·ªìng √Ω k·∫øt n·ªëi v·ªõi nh√≥m "${fromName}".\nH√£y reply tin nh·∫Øn n√†y ƒë·ªÉ g·ª≠i ƒë·∫øn nh√≥m b√™n kia.`,
                threadID,
                (err, info) => {
                    if (err) return console.error(err);
                    ketNoiData.get(threadID).messageID = info.messageID;
                    global.client.handleReply.push({
                        name: module.exports.config.name,
                        messageID: info.messageID,
                        author: null,
                        type: "connected"
                    });
                }
            );
            api.sendMessage(
                `‚úÖ Nh√≥m b·∫°n y√™u c·∫ßu ƒë√£ ƒë·ªìng √Ω k·∫øt n·ªëi!\nH√£y reply tin nh·∫Øn n√†y ƒë·ªÉ g·ª≠i ƒë·∫øn nh√≥m b√™n kia.`,
                fromThread,
                (err, info) => {
                    if (err) return console.error(err);
                    ketNoiData.get(fromThread).messageID = info.messageID;
                    global.client.handleReply.push({
                        name: module.exports.config.name,
                        messageID: info.messageID,
                        author: null,
                        type: "connected"
                    });
                }
            );
        } else {
            ketNoiData.delete(threadID);
            ketNoiData.delete(fromThread);
            api.sendMessage("‚ùå Nh√≥m ƒë√£ t·ª´ ch·ªëi k·∫øt n·ªëi.", fromThread);
            api.sendMessage("‚ùå ƒê√£ t·ª´ ch·ªëi k·∫øt n·ªëi.", threadID);
        }
        return;
    }

    // ƒêang k·∫øt n·ªëi, chuy·ªÉn ti·∫øp tin nh·∫Øn (ch·ªâ g·ª≠i 1 l·∫ßn, kh√¥ng g·ª≠i l·∫°i ·ªü handleEvent)
    if (data.step === "connected" && data.pair) {
        if (event.messageReply && event.messageReply.messageID === data.messageID) {
            const info = await api.getThreadInfo(threadID);
            const senderName = (await api.getUserInfo(senderID))[senderID].name;
            const now = moment().tz("Asia/Ho_Chi_Minh").format("HH:mm:ss DD/MM/YYYY");
            let msg = `üí¨ TIN NH·∫ÆN K·∫æT N·ªêI üí¨\n`;
            msg += `üë• Nh√≥m: ${info.threadName}\nüë§ Ng∆∞·ªùi g·ª≠i: ${senderName}\nüïí Th·ªùi gian: ${now}\n`;
            msg += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n${body || "[Media ƒë√≠nh k√®m]"}`;

            // X·ª≠ l√Ω file ƒë√≠nh k√®m (h·ªó tr·ª£ video v√† GIF ƒë·∫ßy ƒë·ªß)
            let files = [];
            if (attachments && attachments.length > 0) {
                for (const att of attachments) {
                    let ext = "dat";
                    let typeLabel = "";
                    if (att.type === "photo") {
                        ext = "jpg";
                        typeLabel = " [·∫¢nh]";
                    } else if (att.type === "video") {
                        ext = "mp4";
                        typeLabel = " [Video]";
                    } else if (att.type === "audio") {
                        ext = "mp3";
                        typeLabel = " [√Çm thanh]";
                    } else if (att.type === "animated_image") {
                        ext = "gif";
                        typeLabel = " [GIF]";
                    } else if (att.type === "file" && att.name) {
                        ext = att.name.split(".").pop() || "dat";
                        typeLabel = ` [File: ${att.name}]`;
                    }
                    msg += typeLabel; // Th√™m nh√£n lo·∫°i media v√†o tin nh·∫Øn

                    try {
                        const filePath = await downloadAttachment(att.url, ext);
                        files.push(fs.createReadStream(filePath));
                    } catch (e) {
                        console.error("[KETNOI] L·ªói t·∫£i attachment:", e);
                    }
                }
            }

            api.sendMessage({
                body: msg,
                attachment: files.length > 0 ? files : undefined
            }, data.pair, async (err, info2) => {
                if (err) {
                    console.error("[KETNOI] L·ªói g·ª≠i tin nh·∫Øn:", err);
                    return api.sendMessage("‚ùå L·ªói khi chuy·ªÉn ti·∫øp tin nh·∫Øn!", threadID);
                }
                ketNoiData.get(data.pair).messageID = info2.messageID;
                global.client.handleReply.push({
                    name: module.exports.config.name,
                    messageID: info2.messageID,
                    author: null,
                    type: "connected"
                });
                // X√≥a file t·∫°m
                if (files.length > 0) {
                    for (let i = 0; i < files.length; i++) {
                        try {
                            const filePath = files[i].path;
                            if (filePath && fs.existsSync(filePath)) {
                                fs.unlinkSync(filePath);
                            }
                        } catch (e) {
                            console.error("[KETNOI] L·ªói x√≥a file:", e);
                        }
                    }
                }
            }, messageID);
        }
    }
};

// Kh√¥ng c·∫ßn handleEvent v√¨ ch·ªâ d√πng reply ƒë·ªÉ chuy·ªÉn ti·∫øp
