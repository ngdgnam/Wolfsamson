const fs = require("fs-extra");
const path = require("path");

module.exports.config = {
    name: "ngl",
    version: "1.1.0",
    hasPermssion: 0,
    credits: "Kenne400k && Nnam mod",
    description: "H·ªèi ƒë√°p ·∫©n danh (NGL-style) trong group, h·ªó tr·ª£ vote & l·ªãch s·ª≠",
    commandCategory: "Ti·ªán √≠ch",
    usages: "ngl [ask <c√¢u h·ªèi> | answer <ID> <tr·∫£ l·ªùi> | top | history]",
    cooldowns: 5
};

const dataPath = path.join(__dirname, "ngl_data");
if (!fs.existsSync(dataPath)) fs.mkdirSync(dataPath);

function getNGLData(threadID) {
    const file = path.join(dataPath, `${threadID}.json`);
    if (!fs.existsSync(file)) {
        fs.writeFileSync(file, JSON.stringify({ questions: [], votes: {} }, null, 2));
    }
    return JSON.parse(fs.readFileSync(file));
}

function saveNGLData(threadID, data) {
    const file = path.join(dataPath, `${threadID}.json`);
    fs.writeFileSync(file, JSON.stringify(data, null, 2));
}

module.exports.run = async function({ api, event, args, Users }) {
    const { threadID, messageID, senderID } = event;
    const cmd = args[0]?.toLowerCase();
    const data = getNGLData(threadID);
    const questions = data.questions;

    switch (cmd) {
        case "ask":
            const question = args.slice(1).join(" ");
            if (!question) return api.sendMessage("C√¢u h·ªèi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng! V√≠ d·ª•: ngl ask B·∫°n th√≠ch m√†u g√¨?", threadID, messageID);
            const qID = Date.now();
            questions.unshift({ id: qID, question, asker: senderID, answers: [], votes: 0, timestamp: new Date().toISOString() });
            questions.length = Math.min(questions.length, 20); // Gi·ªØ 20 c√¢u g·∫ßn nh·∫•t
            saveNGLData(threadID, data);
            return api.sendMessage(`‚ùì C√¢u h·ªèi ·∫©n danh m·ªõi: "${question}"\nüë§ ID: ${qID}\nüëç Reply "ngl answer ${qID} <tr·∫£ l·ªùi>" ƒë·ªÉ ƒë√°p.\nüìä Reply "ngl vote ${qID}" ƒë·ªÉ vote up.`, threadID, messageID);

        case "answer":
            const qID = parseInt(args[1]);
            const answer = args.slice(2).join(" ");
            if (isNaN(qID) || !answer) return api.sendMessage("C√∫ ph√°p: ngl answer <ID> <tr·∫£ l·ªùi>", threadID, messageID);
            const q = questions.find(q => q.id === qID);
            if (!q) return api.sendMessage("Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi!", threadID, messageID);
            q.answers.push({ answer, answerer: senderID, timestamp: new Date().toISOString() });
            q.answers.length = Math.min(q.answers.length, 5); // Gi·ªõi h·∫°n 5 ƒë√°p √°n
            saveNGLData(threadID, data);
            const askerName = await Users.getNameUser(q.asker);
            return api.sendMessage(`üí¨ Tr·∫£ l·ªùi ·∫©n danh cho "${q.question}":\n"${answer}"\nüë§ H·ªèi b·ªüi: ${askerName} (·∫©n ID)`, threadID, messageID);

        case "vote":
            const vID = parseInt(args[1]);
            if (isNaN(vID)) return api.sendMessage("C√∫ ph√°p: ngl vote <ID>", threadID, messageID);
            const vq = questions.find(q => q.id === vID);
            if (!vq) return api.sendMessage("Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi!", threadID, messageID);
            vq.votes++;
            saveNGLData(threadID, data);
            return api.sendMessage(`üëç ƒê√£ vote up cho c√¢u h·ªèi ID ${vID}! T·ªïng vote: ${vq.votes}`, threadID, messageID);

        case "top":
            const sorted = questions.sort((a, b) => b.votes - a.votes).slice(0, 5);
            let topMsg = "üìä TOP 5 C√ÇU H·ªéI HOT:\n\n";
            for (let i = 0; i < sorted.length; i++) {
                topMsg += `${i+1}. "${sorted[i].question}" (Vote: ${sorted[i].votes})\n`;
            }
            return api.sendMessage(topMsg, threadID, messageID);

        case "history":
            if (questions.length === 0) return api.sendMessage("Ch∆∞a c√≥ c√¢u h·ªèi n√†o!", threadID, messageID);
            let histMsg = "üìú L·ªäCH S·ª¨ 5 C√ÇU H·ªéI G·∫¶N NH·∫§T:\n\n";
            for (let q of questions.slice(0, 5)) {
                const date = new Date(q.timestamp).toLocaleString('vi-VN');
                histMsg += `‚Ä¢ ${date}: "${q.question}" (Vote: ${q.votes})\n`;
            }
            return api.sendMessage(histMsg, threadID, messageID);

        default:
            let listMsg = "‚ùì [ NGL - H·ªéI ƒê√ÅP ·∫®N DANH ]\n\n";
            listMsg += "L·ªánh:\n‚Ä¢ ngl ask <c√¢u h·ªèi> - ƒê·∫∑t c√¢u h·ªèi ·∫©n danh\n‚Ä¢ ngl answer <ID> <tr·∫£ l·ªùi> - Tr·∫£ l·ªùi\n‚Ä¢ ngl vote <ID> - Vote up\n‚Ä¢ ngl top - Top hot\n‚Ä¢ ngl history - L·ªãch s·ª≠\n\n";
            listMsg += "Danh s√°ch c√¢u h·ªèi hi·ªán t·∫°i:\n";
            if (questions.length === 0) {
                listMsg += "Ch∆∞a c√≥ c√¢u h·ªèi n√†o.";
            } else {
                questions.slice(0, 5).forEach((q, i) => {
                    listMsg += `${i+1}. "${q.question}" (ID: ${q.id}, Vote: ${q.votes})\n`;
                });
            }
            return api.sendMessage(listMsg, threadID, messageID);
    }
};
