const QRCode = require("qrcode"); // C·∫ßn c√†i: npm i qrcode
const fs = require("fs-extra");
const path = require("path");
const { createCanvas, loadImage, Canvas } = require("canvas"); // ƒê·ªÉ th√™m watermark n·∫øu c·∫ßn

module.exports.config = {
    name: "qr",
    version: "1.1.0",
    hasPermssion: 0,
    credits: "Kenne400k && Nnam mod",
    description: "T·∫°o QR code t·ª´ text/URL (n√¢ng c·∫•p: m√†u s·∫Øc, watermark, l·ªãch s·ª≠)",
    commandCategory: "Ti·ªán √≠ch",
    usages: "qr <text/URL> [color: #hex] [history]",
    cooldowns: 5,
    dependencies: {
        "qrcode": "",
        "canvas": "",
        "fs-extra": ""
    }
};

const historyPath = path.join(__dirname, "qr_history.json");

function loadHistory(userID) {
    if (!fs.existsSync(historyPath)) fs.writeFileSync(historyPath, JSON.stringify({}, null, 2));
    const allHist = JSON.parse(fs.readFileSync(historyPath, 'utf8'));
    allHist[userID] = allHist[userID] || [];
    return allHist;
}

function saveHistory(data) {
    fs.writeFileSync(historyPath, JSON.stringify(data, null, 2));
}

function addToHistory(userID, text, color = "#000000") {
    const hist = loadHistory(userID);
    hist[userID].unshift({ text: text.substring(0, 50) + (text.length > 50 ? "..." : ""), color, time: new Date().toLocaleString('vi-VN') });
    hist[userID] = hist[userID].slice(0, 10); // Gi·ªØ 10 QR g·∫ßn nh·∫•t
    saveHistory(hist);
}

module.exports.run = async function({ api, event, args, Users }) {
    const { threadID, messageID, senderID } = event;
    const name = await Users.getNameUser(senderID);
    const text = args.slice(0, -1).join(" "); // Text tr∆∞·ªõc color
    const colorArg = args[args.length - 1];

    if (args.length === 0 || text.length === 0) {
        return api.sendMessage(
            `üì± [ QR CODE GENERATOR ]\n\n` +
            `S·ª≠ d·ª•ng: qr <text/URL> [m√†u: #hex]\n` +
            `‚Ä¢ M√†u m·∫∑c ƒë·ªãnh: #000000 (ƒëen)\n` +
            `‚Ä¢ V√≠ d·ª•: qr https://google.com #FF0000 (ƒë·ªè)\n` +
            `‚Ä¢ qr history - Xem l·ªãch s·ª≠ QR c·ªßa b·∫°n\n\n` +
            `QR s·∫Ω scan v·ªÅ text g·ªëc!`,
            threadID, messageID
        );
    }

    if (text === "history") {
        const hist = loadHistory(senderID);
        if (hist[senderID].length === 0) return api.sendMessage("Ch∆∞a t·∫°o QR n√†o!", threadID, messageID);
        let histMsg = "üìú L·ªäCH S·ª¨ QR (5 g·∫ßn nh·∫•t):\n\n";
        for (let h of hist[senderID].slice(0, 5)) {
            histMsg += `‚Ä¢ ${h.time}: ${h.text} (M√†u: ${h.color})\n`;
        }
        return api.sendMessage(histMsg, threadID, messageID);
    }

    const color = colorArg.startsWith("#") ? colorArg : "#000000"; // M·∫∑c ƒë·ªãnh ƒëen

    const qrPath = path.join(__dirname, "cache", `qr-${senderID}-${Date.now()}.png`);

    try {
        // T·∫°o QR c∆° b·∫£n
        await QRCode.toFile(qrPath, text, {
            width: 256,
            color: {
                dark: color,  // M√†u QR
                light: "#FFFFFF"  // N·ªÅn tr·∫Øng
            },
            margin: 1
        });

        // Th√™m watermark (t√πy ch·ªçn, d√πng Canvas)
        const canvas = createCanvas(256, 256 + 50); // Th√™m ch·ªó cho watermark
        const ctx = canvas.getContext("2d");
        const qrImg = await loadImage(qrPath);
        ctx.drawImage(qrImg, 0, 0, 256, 256);
        ctx.fillStyle = "#000000";
        ctx.font = "bold 16px Arial";
        ctx.textAlign = "center";
        ctx.fillText(`Made by ${name}`, 128, 256 + 30); // Watermark d∆∞·ªõi

        const finalBuffer = canvas.toBuffer("image/png");
        fs.writeFileSync(qrPath, finalBuffer);

        addToHistory(senderID, text, color);

        api.sendMessage({
            body: `‚úÖ QR Code cho "${text.substring(0, 50)}${text.length > 50 ? '...' : ''}"\nüé® M√†u: ${color}\nüì± Scan ƒë·ªÉ l·∫•y text g·ªëc!`,
            attachment: fs.createReadStream(qrPath)
        }, threadID, () => fs.unlinkSync(qrPath), messageID);
    } catch (e) {
        console.error("[QR] L·ªói t·∫°o:", e);
        return api.sendMessage(`‚ùå L·ªói t·∫°o QR: ${e.message}\nKi·ªÉm tra text/m√†u h·ª£p l·ªá!`, threadID, messageID);
    }
};
