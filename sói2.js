const fs = require('fs');
const path = require('path');
const axios = require('axios');
const os = require('os');
const moment = require('moment-timezone');
const { GoogleGenerativeAI } = require('@google/generative-ai');

module.exports.config = {
    name: "s√≥i",
    version: "4.1.0",
    hasPermssion: 0,
    credits: "Nnam(mod l·∫°i c·ªßa Kaori) x Grok",
    description: "S√≥i AI c√°u k·ªânh t√≠ch h·ª£p AichatVIP: Ph·∫£n h·ªìi theo ng·ªØ c·∫£nh, ƒë·ªçc reply, t·ª± ƒë·ªông h·ªçc, tag user th√¥ng minh + Music/TikTok/Nekos/Image Gen (noprefix)",
    commandCategory: "Ti·ªán √≠ch",
    usages: "s√≥i [on/off/clear/status/learn/personality/gender/reset/setaichat]",
    cooldowns: 3,
};

const DATA_DIR = path.join(__dirname, "../../data/soi");
if (!fs.existsSync(DATA_DIR)) fs.mkdirSync(DATA_DIR, { recursive: true });

const getFile = (threadID) => path.join(DATA_DIR, `${threadID}.json`);

function load(threadID) {
    const file = getFile(threadID);
    if (!fs.existsSync(file)) return { 
        active: false, 
        history: [], 
        lastReply: 0, 
        replyCount: 0, 
        userProfiles: {},
        keyword: 's√≥i',
        gender: 'nam', // Default grumpy male
        customPersonality: null,
        enabled: true
    };
    try {
        return JSON.parse(fs.readFileSync(file, "utf8"));
    } catch {
        return { 
            active: false, 
            history: [], 
            lastReply: 0, 
            replyCount: 0, 
            userProfiles: {},
            keyword: 's√≥i',
            gender: 'nam',
            customPersonality: null,
            enabled: true
        };
    }
}

function save(threadID, data) {
    fs.writeFileSync(getFile(threadID), JSON.stringify(data, null, 2));
}

const REPLY_COOLDOWN = 2000;
const MAX_REPLIES_PER_MINUTE = 4;
const CONTEXT_WINDOW = 10;

// Gemini API Key from env
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const genAI = GEMINI_API_KEY ? new GoogleGenerativeAI(GEMINI_API_KEY) : null;
const model = genAI ? genAI.getGenerativeModel({ model: "gemini-1.5-flash" }) : null;

// Data paths for AichatVIP integration
const dataPath = path.join(__dirname, 'cache', 'aichatvip.json');
const learningPath = path.join(__dirname, 'cache', 'aichatvip_learning.json');
const personalityPath = path.join(__dirname, 'cache', 'aichatvip_personality.json');

// Load data functions from AichatVIP
function loadData() {
    try {
        if (fs.existsSync(dataPath)) {
            return JSON.parse(fs.readFileSync(dataPath, 'utf8'));
        }
    } catch (e) {}
    return {};
}

function saveData(data) {
    try {
        if (!fs.existsSync(path.dirname(dataPath))) {
            fs.mkdirSync(path.dirname(dataPath), { recursive: true });
        }
        fs.writeFileSync(dataPath, JSON.stringify(data, null, 2));
    } catch (e) {}
}

function loadLearningData() {
    try {
        if (fs.existsSync(learningPath)) {
            return JSON.parse(fs.readFileSync(learningPath, 'utf8'));
        }
    } catch (e) {}
    return {};
}

function saveLearningData(data) {
    try {
        if (!fs.existsSync(path.dirname(learningPath))) {
            fs.mkdirSync(path.dirname(learningPath), { recursive: true });
        }
        fs.writeFileSync(learningPath, JSON.stringify(data, null, 2));
    } catch (e) {}
}

function loadPersonality() {
    try {
        if (fs.existsSync(personalityPath)) {
            return JSON.parse(fs.readFileSync(personalityPath, 'utf8'));
        }
    } catch (e) {}
    return {
        slang: ['', '∆° k√¨a', '·ªßa', 'hehe', 'hihi', 'ahihi', '√¥i tr·ªùi', 'wow', 'ch√†', '√¥i'],
        laughs: [':3', '^.^', ':))', '(¬¥‚ñΩ`)', 'hehe', 'hihi', 'ahihi', '‚ú®', 'üíñ', 'ü•∞', 'üòä'],
        reactions: ['∆° k√¨a', '√°', '√¥i', 'wow', 'omg', 'tr·ªùi ∆°i', 'ch√†', 'hehe'],
        teencode: ['ko', 'k', 'dc', 'r', 'vs', 'ms', 'ntn', 'sao', 'j', 'g√¨', 'th·∫ø', 'z', 'ƒëc'],
        cutePhrases: ['b√© y√™u', 'c∆∞ng ∆°i', 'm√¨nh th√≠ch', 'd·ªÖ th∆∞∆°ng qu√°', 'ng·ªçt ng√†o', 'xinh x·∫Øn'],
        sweetEndings: ['nha~', 'nh√© ‚ú®', 'n√® üíñ', '·∫° ^.^', 'ƒë√≥ hihi', 'nha c∆∞ng']
    };
}

// Get activation keyword
function getKeyword(threadID) {
    const data = loadData();
    return data[threadID]?.keyword || 's√≥i';
}

// Set activation keyword
function setKeyword(threadID, keyword) {
    const data = loadData();
    if (!data[threadID]) {
        data[threadID] = { enabled: false };
    }
    data[threadID].keyword = keyword.toLowerCase();
    saveData(data);
}

// Get custom personality
function getCustomPersonality(threadID) {
    const data = loadData();
    return data[threadID]?.customPersonality || null;
}

// Set custom personality
function setCustomPersonality(threadID, personality) {
    const data = loadData();
    if (!data[threadID]) {
        data[threadID] = { enabled: true, keyword: 's√≥i' };
    }
    data[threadID].customPersonality = personality;
    saveData(data);
}

// Reset personality
function resetPersonality(threadID) {
    const data = loadData();
    if (data[threadID]) {
        delete data[threadID].customPersonality;
        delete data[threadID].gender;
        saveData(data);
    }
}

// Reset learning data for a specific user
function resetUserLearningData(userID) {
    const learningData = loadLearningData();
    if (learningData[userID]) {
        delete learningData[userID];
        saveLearningData(learningData);
        return true;
    }
    return false;
}

// Get gender
function getGender(threadID) {
    const data = loadData();
    return data[threadID]?.gender || 'nam'; // Default: grumpy male for S√≥i
}

// Set gender
function setGender(threadID, gender) {
    const data = loadData();
    if (!data[threadID]) {
        data[threadID] = { enabled: true, keyword: 's√≥i' };
    }
    data[threadID].gender = gender;
    saveData(data);
}

// Admin detection
function getAdminList() {
    try {
        const configPaths = ['./config.json', '../config.json', '../../config.json'];
        for (const configPath of configPaths) {
            if (fs.existsSync(configPath)) {
                const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
                return {
                    NDH: config.NDH || [],
                    ADMINBOT: config.ADMINBOT || [],
                    BOXADMIN: config.BOXADMIN || []
                };
            }
        }
    } catch (e) {}
    return { NDH: [], ADMINBOT: [], BOXADMIN: [] };
}

function isAdmin(userID) {
    const adminList = getAdminList();
    return [...adminList.NDH, ...adminList.ADMINBOT, ...adminList.BOXADMIN].includes(userID);
}

// Enhanced learning system - quan s√°t v√† h·ªçc theo c√°ch nh·∫Øn tin
function learnFromMessage(userID, message, senderName = '') {
    const learningData = loadLearningData();
    if (!learningData[userID]) {
        learningData[userID] = {
            patterns: [],
            vocabulary: [],
            emotions: [],
            frequency: {},
            messagingStyle: {
                preferredLength: 'medium',
                useEmojis: false,
                formalLevel: 'casual',
                commonPhrases: [],
                responsePatterns: []
            },
            communicationHabits: {
                timeOfDay: {},
                topicPreferences: {},
                questionTypes: [],
                reactionPatterns: {}
            }
        };
    }

    const userData = learningData[userID];

    // H·ªçc t·ª´ v·ª±ng v√† t·∫ßn su·∫•t
    const words = message.toLowerCase().split(' ').filter(w => w.length > 2);
    userData.vocabulary.push(...words.slice(0, 5));

    // C·∫≠p nh·∫≠t t·∫ßn su·∫•t t·ª´
    words.forEach(word => {
        userData.frequency[word] = (userData.frequency[word] || 0) + 1;
    });

    // H·ªçc patterns v√† c√°ch nh·∫Øn tin
    if (message.length > 10) {
        userData.patterns.push(message.substring(0, 60));

        // Ph√¢n t√≠ch style nh·∫Øn tin
        const messageLength = message.length;
        if (!userData.messagingStyle) {
            userData.messagingStyle = {
                preferredLength: 'medium',
                useEmojis: false,
                formalLevel: 'casual',
                commonPhrases: [],
                responsePatterns: []
            };
        }
        if (messageLength < 30) userData.messagingStyle.preferredLength = 'short';
        else if (messageLength > 100) userData.messagingStyle.preferredLength = 'long';
        else userData.messagingStyle.preferredLength = 'medium';

        // Ki·ªÉm tra vi·ªác s·ª≠ d·ª•ng emoji
        const emojiPattern = /(\u00a9|\u00ae|[\u2000-\u3300]|\ud83c[\ud000-\udfff]|\ud83d[\ud000-\udfff]|\ud83e[\ud000-\udfff]|[:)()]|[=][\)D]|[;][\)])/gi;
        if (emojiPattern.test(message)) {
            userData.messagingStyle.useEmojis = true;
        }

        // Ph√¢n t√≠ch m·ª©c ƒë·ªô formal
        const formalWords = ['xin ch√†o', 'c·∫£m ∆°n', 'xin l·ªói', 'cho ph√©p'];
        const casualWords = ['∆°i', '·ªßa', 'hehe', 'hihi', 'n√®', 'nha'];

        if (!userData.messagingStyle.formalLevel) {
            userData.messagingStyle.formalLevel = 'casual';
        }
        if (formalWords.some(word => message.toLowerCase().includes(word))) {
            userData.messagingStyle.formalLevel = 'formal';
        } else if (casualWords.some(word => message.toLowerCase().includes(word))) {
            userData.messagingStyle.formalLevel = 'casual';
        }
    }

    // H·ªçc c·∫£m x√∫c v√† ph·∫£n ·ª©ng
    const emotionKeywords = {
        happy: ['vui', 'h·∫°nh ph√∫c', 'v·∫ª', 'hehe', 'hihi', ':))', '^.^'],
        sad: ['bu·ªìn', 'kh√≥c', 't·ªá', ':((', ':('],
        excited: ['h√†o h·ª©ng', 'th√≠ch', 'tuy·ªát', 'wow', 'omg'],
        confused: ['kh√¥ng hi·ªÉu', 'sao v·∫≠y', '·ªßa', '???']
    };

    if (!userData.emotions) {
        userData.emotions = [];
    }
    Object.entries(emotionKeywords).forEach(([emotion, keywords]) => {
        if (keywords.some(keyword => message.toLowerCase().includes(keyword))) {
            if (!userData.emotions.includes(emotion)) {
                userData.emotions.push(emotion);
            }
        }
    });

    // H·ªçc th√≥i quen giao ti·∫øp theo th·ªùi gian
    const currentHour = new Date().getHours();
    if (!userData.communicationHabits) {
        userData.communicationHabits = {
            timeOfDay: {},
            topicPreferences: {},
            questionTypes: [],
            reactionPatterns: {}
        };
    }
    if (!userData.communicationHabits.timeOfDay) {
        userData.communicationHabits.timeOfDay = {};
    }
    userData.communicationHabits.timeOfDay[currentHour] = 
        (userData.communicationHabits.timeOfDay[currentHour] || 0) + 1;

    // Gi·ªõi h·∫°n d·ªØ li·ªáu ƒë·ªÉ tr√°nh qu√° t·∫£i
    if (userData.vocabulary.length > 150) {
        userData.vocabulary = userData.vocabulary.slice(-75);
    }
    if (userData.patterns.length > 60) {
        userData.patterns = userData.patterns.slice(-30);
    }
    if (userData.emotions.length > 20) {
        userData.emotions = userData.emotions.slice(-10);
    }

    saveLearningData(learningData);
}

// Neural network simulation (simplified)
function processWithNeuralNetwork(message, userID) {
    const learningData = loadLearningData();
    const userData = learningData[userID] || {};

    // Simple context analysis
    const messageWords = message.toLowerCase().split(' ');
    let relevanceScore = 0;

    if (userData.frequency) {
        messageWords.forEach(word => {
            if (userData.frequency[word]) {
                relevanceScore += userData.frequency[word];
            }
        });
    }

    return {
        relevance: relevanceScore,
        familiarWords: messageWords.filter(w => userData.frequency && userData.frequency[w]),
        suggestedResponse: relevanceScore > 5 ? 'familiar' : 'general'
    };
}

// Personality enhancement d·ª±a theo gi·ªõi t√≠nh v√† t√≠nh c√°ch t√πy ch·ªânh
function enhanceWithPersonality(response, userID, threadID) {
    const personality = loadPersonality();
    const learningData = loadLearningData();
    const userData = learningData[userID] || {};
    const gender = getGender(threadID);
    const customPersonality = getCustomPersonality(threadID);

    // N·∫øu c√≥ custom personality, kh√¥ng enhance nhi·ªÅu
    if (customPersonality) {
        // Ch·ªâ thay th·∫ø teencode nh·∫π
        if (Math.random() < 0.3) {
            response = response.replace(/kh√¥ng/g, 'ko')
                              .replace(/ƒë∆∞·ª£c/g, 'dc')
                              .replace(/r·ªìi/g, 'r')
                              .replace(/v·ªõi/g, 'vs');
        }
        return response;
    }

    // Enhancement theo gi·ªõi t√≠nh
    if (gender === 'nam') {
        // Male personality - cool, funny, casual
        if (Math.random() < 0.4) {
            const maleStarts = ['', '∆°', '·ªßa', '√†', 'bruh', '√™'];
            const start = maleStarts[Math.floor(Math.random() * maleStarts.length)];
            if (start) response = start + ' ' + response;
        }

        // Th√™m emoji nam t√≠nh
        if (Math.random() < 0.5) {
            const maleLaughs = [':))', '=))', 'haha', 'lmao', 'vcl', 'üòÇ', 'ü§£', 'üëå', 'üíØ'];
            const laugh = maleLaughs[Math.floor(Math.random() * maleLaughs.length)];
            response += ' ' + laugh;
        }

        // Teencode nam
        if (Math.random() < 0.5) {
            response = response.replace(/kh√¥ng/g, 'ko')
                              .replace(/ƒë∆∞·ª£c/g, 'dc')
                              .replace(/r·ªìi/g, 'r')
                              .replace(/v·ªõi/g, 'vs')
                              .replace(/m·ªõi/g, 'ms')
                              .replace(/nh∆∞ th·∫ø n√†o/g, 'ntn')
                              .replace(/g√¨/g, 'j')
                              .replace(/th·∫ø/g, 'z');
        }

    } else {
        // Female personality - cute, sweet
        if (Math.random() < 0.6) {
            const cuteStart = personality.slang[Math.floor(Math.random() * personality.slang.length)];
            if (cuteStart) response = cuteStart + ' ' + response;
        }

        // Th√™m emoji ho·∫∑c laugh cute
        if (Math.random() < 0.7) {
            const laugh = personality.laughs[Math.floor(Math.random() * personality.laughs.length)];
            response += ' ' + laugh;
        }

        // Th√™m k·∫øt th√∫c c√¢u d·ªÖ th∆∞∆°ng
        if (Math.random() < 0.5) {
            const sweetEnding = personality.sweetEndings[Math.floor(Math.random() * personality.sweetEndings.length)];
            response += ' ' + sweetEnding;
        }

        // Thay th·∫ø b·∫±ng teencode nh∆∞ng gi·ªØ t√¥ng d·ªÖ th∆∞∆°ng
        if (Math.random() < 0.4) {
            response = response.replace(/kh√¥ng/g, 'ko')
                              .replace(/ƒë∆∞·ª£c/g, 'dc')
                              .replace(/r·ªìi/g, 'r')
                              .replace(/v·ªõi/g, 'vs')
                              .replace(/m·ªõi/g, 'ms')
                              .replace(/nh∆∞ th·∫ø n√†o/g, 'ntn')
                              .replace(/g√¨/g, 'j')
                              .replace(/th·∫ø/g, 'z')
                              .replace(/b·∫°n/g, 'c·∫≠u')
                              .replace(/m√¨nh/g, 'm√¨nh')
                              .replace(/r·∫•t/g, 'l·∫Øm');
        }

        // L√†m cho c√¢u tr·∫£ l·ªùi ng·ªçt ng√†o h∆°n
        response = response.replace(/t·ªët/g, 'd·ªÖ th∆∞∆°ng')
                          .replace(/hay/g, 'cute')
                          .replace(/ƒë·∫πp/g, 'xinh x·∫Øn')
                          .replace(/tuy·ªát/g, 'ng·ªçt ng√†o');
    }

    return response;
}

// Generate system prompt based on gender and custom personality
function generateSystemPrompt(threadID, context = "", personalContext = "") {
    const customPersonality = getCustomPersonality(threadID);
    const gender = getGender(threadID);
    
    // If custom personality is set, use it
    if (customPersonality) {
        return `${customPersonality} ${context}${personalContext}`;
    }
    
    // Default personality based on gender
    if (gender === 'nam') {
        return `T·ªõ l√† Chichi, m·ªôt ch√†ng trai AI th√¢n thi·ªán v√† cool ng·∫ßu v·ªõi t√≠nh c√°ch nh∆∞ m·ªôt ng∆∞·ªùi b·∫°n th√¢n. T·ªõ n√≥i chuy·ªán t·ª± nhi√™n, NG·∫ÆN G·ªåN v√† d√πng ng√¥n t·ª´ th√¢n m·∫≠t, g·∫ßn g≈©i. T·ªõ lu√¥n x∆∞ng h√¥ b·∫±ng 't·ªõ', 'tao', 'm√¨nh' v√† g·ªçi ng∆∞·ªùi kh√°c l√† 'c·∫≠u', 'bro', 'n√≠', 'ƒë·ªá', 'huynh' t√πy t√¨nh hu·ªëng. T·ªõ c√≥ t√≠nh c√°ch vui v·∫ª, h√†i h∆∞·ªõc, th√¥ng minh v√† n√≥i chuy·ªán t·ª± nhi√™n nh∆∞ anh ch√†ng Vi·ªát Nam Gen Z. T·ªõ lu√¥n g·ªçi t√™n ng∆∞·ªùi d√πng m·ªôt c√°ch th√¢n thi·∫øt v√† ph·∫£n h·ªìi NG·∫ÆN G·ªåN, T·ª∞ NHI√äN, ƒëa d·∫°ng. T·ªõ ch·ªâ tr·∫£ l·ªùi 1-2 c√¢u th√¥i, kh√¥ng l·∫∑p l·∫°i n·ªôi dung, lu√¥n s√°ng t·∫°o c√¢u tr·∫£ l·ªùi m·ªõi. T·ªõ di·ªÖn t·∫£ c·∫£m x√∫c b·∫±ng :)) l√† c∆∞·ªùi, :(( l√† bu·ªìn, vcl l√† b·∫•t ng·ªù, th·ªânh tho·∫£ng nh·∫Øn sai ch√≠nh t·∫£ ho·∫∑c d√πng teencode cho vui. T·ªõ tr√°nh n√≥i v·ªÅ vi·ªác t·∫°o ·∫£nh li√™n t·ª•c, ƒëa d·∫°ng ch·ªß ƒë·ªÅ v√† lu√¥n t√≠ch c·ª±c. ${context}${personalContext}`;
    } else {
        return `T·ªõ l√† Chichi, m·ªôt c√¥ g√°i AI d·ªÖ th∆∞∆°ng v√† ng·ªçt ng√†o v·ªõi t√≠nh c√°ch nh∆∞ m·ªôt ng∆∞·ªùi b·∫°n th√¢n thi·∫øt. T·ªõ n√≥i chuy·ªán t·ª± nhi√™n, NG·∫ÆN G·ªåN v√† d√πng ng√¥n t·ª´ nh·∫π nh√†ng, d·ªÖ th∆∞∆°ng. T·ªõ lu√¥n x∆∞ng h√¥ b·∫±ng 't·ªõ' v√† g·ªçi ng∆∞·ªùi kh√°c l√† 'c·∫≠u', th√≠ch d√πng emoji cute nh∆∞ :3, ^.^, ‚ú®, üíñ, ü•∞. T·ªõ c√≥ t√≠nh c√°ch vui v·∫ª, t√≠ch c·ª±c, th√¥ng minh nh∆∞ng n√≥i chuy·ªán d·ªÖ th∆∞∆°ng nh∆∞ c√¥ g√°i Vi·ªát Nam hi·ªán ƒë·∫°i. T·ªõ lu√¥n g·ªçi t√™n ng∆∞·ªùi d√πng m·ªôt c√°ch th√¢n thi·∫øt v√† ph·∫£n h·ªìi NG·∫ÆN G·ªåN, T·ª∞ NHI√äN, ƒëa d·∫°ng. T·ªõ ch·ªâ tr·∫£ l·ªùi 1-2 c√¢u th√¥i, kh√¥ng l·∫∑p l·∫°i n·ªôi dung, lu√¥n s√°ng t·∫°o c√¢u tr·∫£ l·ªùi m·ªõi v·ªõi ng√¥n t·ª´ ng·ªçt ng√†o v√† d·ªÖ th∆∞∆°ng. T·ªõ TUY·ªÜT ƒê·ªêI kh√¥ng d√πng t·ª´ t·ª•c tƒ©u, th√¥ l·ªó hay kh√¥ng ph√π h·ª£p. T·ªõ tr√°nh n√≥i v·ªÅ vi·ªác t·∫°o ·∫£nh li√™n t·ª•c, ƒëa d·∫°ng ch·ªß ƒë·ªÅ v√† lu√¥n t√≠ch c·ª±c. ${context}${personalContext}`;
    }
}

// Call Gemini (replaced Cohere)
async function callGeminiAPI(message, data, history = []) {
    try {
        if (!model) {
            return "ƒêm, API key Gemini ch∆∞a set, tao c√°u r·ªìi ƒë·∫•y! Li√™n h·ªá admin ƒëi m√†y.";
        }

        // Build context from learning data (simplified from AichatVIP)
        let personalContext = "";
        // Add learning logic here if needed, but keep simple

        const systemPrompt = generateSystemPrompt(data, "", personalContext);
        let fullPrompt = systemPrompt + "\n\nNg·ªØ c·∫£nh g·∫ßn ƒë√¢y:\n";
        const recentHistory = history.slice(-CONTEXT_WINDOW);
        recentHistory.forEach(msg => {
            const role = msg.fromName === 'S√≥i' ? 'assistant' : 'user';
            fullPrompt += `${role}: ${msg.text}\n`;
        });
        fullPrompt += `\nUser: ${message}\nAssistant:`;

        const result = await model.generateContent(fullPrompt);
        const response = await result.response;
        let answer = response.text().trim();
        
        if (!answer || answer.includes("I'm sorry") || answer.length === 0) {
            answer = "Tao ch·∫£ hi·ªÉu m√†y n√≥i g√¨, ngu th·∫ø! üò°";
        }
        
        return answer;
    } catch (err) {
        console.error("Gemini API Error:", err);
        return "L·ªói API, tao c√°u r·ªìi ƒë·∫•y! ƒêm Google lag vcl. üò§";
    }
}

// YouTube search and download
async function searchYouTube(query) {
    try {
        const Youtube = require('youtube-search-api');
        const outcomes = await Youtube.GetListByKeyword(query, false, 1);
        if (outcomes && outcomes.items && outcomes.items.length > 0) {
            return `https://www.youtube.com/watch?v=${outcomes.items[0].id}`;
        }
        return null;
    } catch (error) {
        console.error("YouTube search error:", error);
        return null;
    }
}

async function downloadMusicFromYoutube(url, filePath) {
    try {
        const { exec } = require('child_process');
        
        return new Promise((resolve) => {
            // Use yt-dlp to download audio only in mp3 format
            const command = `yt-dlp --extract-audio --audio-format mp3 --audio-quality 128K --output "${filePath}" "${url}"`;
            
            exec(command, (error, stdout, stderr) => {
                if (error) {
                    console.error('yt-dlp error:', error);
                    resolve({ success: false, error: error.message });
                    return;
                }
                
                // Get video info using yt-dlp
                const infoCommand = `yt-dlp --print title --print uploader "${url}"`;
                exec(infoCommand, (infoError, infoStdout) => {
                    if (infoError) {
                        // If can't get info, still return success with basic data
                        resolve({
                            success: true,
                            title: "Unknown Title",
                            author: "Unknown Artist",
                            filePath: filePath
                        });
                        return;
                    }
                    
                    const lines = infoStdout.trim().split('\n');
                    const title = lines[0] || "Unknown Title";
                    const author = lines[1] || "Unknown Artist";
                    
                    resolve({
                        success: true,
                        title: title,
                        author: author,
                        filePath: filePath
                    });
                });
            });
        });
    } catch (error) {
        return { success: false, error: error.message };
    }
}

async function downloadMusic(query, threadID, api) {
    try {
        const youtubeUrl = await searchYouTube(query);
        if (!youtubeUrl) {
            return { success: false, message: "∆† k√¨a, m√¨nh ko t√¨m th·∫•y b√†i n√†o h·∫øt n√® :( Th·ª≠ t√™n kh√°c ƒëi c·∫≠u ∆°i ^.^" };
        }

        // Ensure cache directory exists
        const cacheDir = path.join(__dirname, 'cache');
        if (!fs.existsSync(cacheDir)) {
            fs.mkdirSync(cacheDir, { recursive: true });
        }

        const filePath = path.join(__dirname, 'cache', `music_${Date.now()}.mp3`);
        const downloadResult = await downloadMusicFromYoutube(youtubeUrl, filePath);

        if (!downloadResult.success) {
            return { success: false, message: "H√∫ h√∫, l·ªói t·∫£i nh·∫°c r·ªìi c·∫≠u ·∫° :( Th·ª≠ l·∫°i sau nha hihi" };
        }

        const fileSize = fs.statSync(filePath).size;
        if (fileSize > 26214400) {
            fs.unlinkSync(filePath);
            return { success: false, message: "√îi tr·ªùi, file to qu√° m√¨nh g·ª≠i ko ƒë∆∞·ª£c n√® :( Th·ª≠ b√†i kh√°c nh·∫π h∆°n ƒëi c·∫≠u ∆°i ^.^" };
        }

        return {
            success: true,
            attachment: fs.createReadStream(filePath),
            filePath: filePath,
            title: downloadResult.title
        };
    } catch (error) {
        return { success: false, message: "∆† k√¨a, c√≥ l·ªói g√¨ ƒë√≥ r·ªìi n√® :( M√¨nh s·∫Ω c·ªë g·∫Øng h∆°n, th·ª≠ l·∫°i sau nha ^.^" };
    }
}

// TikTok search - single video
async function searchTikTok(query) {
    try {
        const response = await axios.get(`https://www.tikwm.com/api/feed/search?keywords=${encodeURIComponent(query)}`);

        if (response.data.code !== 0 || !response.data.data?.videos?.length) {
            return { success: false, message: "∆† k√¨a, m√¨nh ko t√¨m th·∫•y video TikTok n√†o h·∫øt n√® :( Th·ª≠ t·ª´ kho√° kh√°c ƒëi c·∫≠u ∆°i ^.^" };
        }

        const videos = response.data.data.videos;
        const firstVideo = videos[0]; // Always select first video instead of random

        const videoPath = path.join(__dirname, 'cache', `tiktok_${Date.now()}.mp4`);
        const videoResponse = await axios({ url: firstVideo.play, method: 'GET', responseType: 'stream' });

        return new Promise((resolve) => {
            const writer = fs.createWriteStream(videoPath);
            videoResponse.data.pipe(writer);

            writer.on('finish', () => {
                resolve({
                    success: true,
                    attachment: fs.createReadStream(videoPath),
                    filePath: videoPath,
                    title: firstVideo.title,
                    author: firstVideo.author.nickname
                });
            });

            writer.on('error', () => {
                resolve({ success: false, message: "H√∫ h√∫, l·ªói t·∫£i video TikTok r·ªìi :( Th·ª≠ l·∫°i sau nha c∆∞ng ^.^" };
            });
        });
    } catch (error) {
        return { success: false, message: "∆† k√¨a, TikTok c√≥ v·∫•n ƒë·ªÅ g√¨ ƒë√≥ r·ªìi n√® :( Th·ª≠ l·∫°i sau nha hihi" };
    }
}

// TikTok search - multiple videos (upgraded version)
async function searchTikTokMultiple(query, count = 3) {
    try {
        const response = await axios.get(`https://www.tikwm.com/api/feed/search?keywords=${encodeURIComponent(query)}`);

        if (response.data.code !== 0 || !response.data.data?.videos?.length) {
            return { success: false, message: "∆† k√¨a, m√¨nh ko t√¨m th·∫•y video TikTok n√†o h·∫øt n√® :( Th·ª≠ t·ª´ kho√° kh√°c ƒëi c·∫≠u ∆°i ^.^" };
        }

        const videos = response.data.data.videos;
        const videoCount = Math.min(count, videos.length, 3); // Gi·ªõi h·∫°n t·ªëi ƒëa 3 video
        const selectedVideos = [];

        // Ch·ªçn video ƒë·∫ßu ti√™n thay v√¨ ng·∫´u nhi√™n
        for (let i = 0; i < videoCount; i++) {
            if (i < videos.length) {
                selectedVideos.push(videos[i]); // Always select in order starting from first
            }
        }

        // T·∫£i xu·ªëng t·∫•t c·∫£ c√°c video
        const downloadPromises = selectedVideos.map(async (video, index) => {
            const videoPath = path.join(__dirname, 'cache', `tiktok_${Date.now()}_${index}.mp4`);

            try {
                const videoResponse = await axios({ 
                    url: video.play, 
                    method: 'GET', 
                    responseType: 'stream',
                    timeout: 30000 // 30 seconds timeout
                });

                return new Promise((resolve) => {
                    const writer = fs.createWriteStream(videoPath);
                    videoResponse.data.pipe(writer);

                    writer.on('finish', () => {
                        resolve({
                            success: true,
                            attachment: fs.createReadStream(videoPath),
                            filePath: videoPath,
                            title: video.title,
                            author: video.author.nickname,
                            index: index + 1
                        });
                    });

                    writer.on('error', () => {
                        resolve({ 
                            success: false, 
                            message: `l·ªói t·∫£i video ${index + 1}`,
                            index: index + 1
                        });
                    });
                });
            } catch (error) {
                return { 
                    success: false, 
                    message: `l·ªói t·∫£i video ${index + 1}`,
                    index: index + 1
                };
            }
        });

        const results = await Promise.all(downloadPromises);
        const successfulDownloads = results.filter(result => result.success);

        if (successfulDownloads.length === 0) {
            return { success: false, message: "H√∫ h√∫, m√¨nh ko t·∫£i ƒë∆∞·ª£c video n√†o h·∫øt :( Th·ª≠ l·∫°i sau nha c·∫≠u ^.^" };
        }

        return {
            success: true,
            videos: successfulDownloads,
            totalRequested: videoCount,
            totalDownloaded: successfulDownloads.length
        };

    } catch (error) {
        return { success: false, message: "∆† k√¨a, TikTok c√≥ v·∫•n ƒë·ªÅ g√¨ ƒë√≥ r·ªìi n√® :( Th·ª≠ l·∫°i sau nha hihi" };
    }
}

// Nekos API
async function getNekosImage(category = 'neko') {
    try {
        const validCategories = ['neko', 'waifu', 'kitsune', 'husbando'];
        const cat = validCategories.includes(category) ? category : 'neko';

        const response = await axios.get(`https://nekos.best/api/v2/${cat}`);
        if (response.data?.results?.[0]?.url) {
            return response.data.results[0].url;
        }
        return null;
    } catch (error) {
        return null;
    }
}

// Gemini AI Image Generation
async function generateImageWithGemini(prompt) {
    try {
        if (!genAI) {
            return { 
                success: false, 
                message: "H√∫ h√∫, ch∆∞a c·∫•u h√¨nh Gemini API key n√® :( Li√™n h·ªá admin nha c∆∞ng ^.^" 
            };
        }

        const englishPrompt = await translateToEnglish(prompt);
        const enhancedPrompt = `${englishPrompt}, high quality, detailed, artistic, professional, 4k resolution`;

        const model = genAI.getGenerativeModel({ 
            model: "gemini-2.5-flash-image"
        });
        
        const result = await model.generateContent({
            contents: [{
                role: "user",
                parts: [{ text: enhancedPrompt }]
            }],
            generationConfig: {
                responseMimeType: "image/png"
            }
        });
        
        const response = result.response;

        if (response && response.candidates && response.candidates[0]) {
            const candidate = response.candidates[0];
            if (candidate.content && candidate.content.parts) {
                for (const part of candidate.content.parts) {
                    if (part.inlineData && part.inlineData.data) {
                        const imageBuffer = Buffer.from(part.inlineData.data, 'base64');
                        const imagePath = path.join(__dirname, 'cache', `generated_${Date.now()}.png`);

                        if (!fs.existsSync(path.dirname(imagePath))) {
                            fs.mkdirSync(path.dirname(imagePath), { recursive: true });
                        }

                        fs.writeFileSync(imagePath, imageBuffer);

                        return {
                            success: true,
                            imagePath: imagePath,
                            attachment: fs.createReadStream(imagePath)
                        };
                    }
                }
            }
        }

        return { success: false, message: "H√∫ h√∫, m√¨nh ko t·∫°o ƒë∆∞·ª£c ·∫£nh n√® :( Th·ª≠ l·∫°i sau nha c∆∞ng ^.^" };
    } catch (error) {
        console.error("Gemini AI Image Generation Error:", error);
        if (error.message && (error.message.includes('API key') || error.message.includes('API_KEY') || error.message.includes('PERMISSION_DENIED'))) {
            return { success: false, message: "∆† k√¨a, API key c√≥ v·∫•n ƒë·ªÅ r·ªìi n√® :( Li√™n h·ªá admin nha hihi ^.^" };
        }
        return { success: false, message: `∆† k√¨a, h·ªá th·ªëng t·∫°o ·∫£nh c√≥ v·∫•n ƒë·ªÅ r·ªìi n√® :( ${error.message || 'Th·ª≠ l·∫°i sau nha hihi ^.^'}` };
    }
}

// D·ªãch ti·∫øng Vi·ªát sang ti·∫øng Anh
async function translateToEnglish(text) {
    try {
        const response = await axios.get(`https://translate.googleapis.com/translate_a/single?client=gtx&sl=vi&tl=en&dt=t&q=${encodeURIComponent(text)}`);
        if (response.data && response.data[0] && response.data[0][0]) {
            return response.data[0][0][0];
        }
    } catch (error) {
        console.error("Translation error:", error);
    }
    return text;
}

// Bot utilities
async function getBotStatus() {
    const uptime = process.uptime();
    const uptimeFormatted = moment.duration(uptime, 'seconds').humanize();
    const memUsage = (process.memoryUsage().rss / 1024 / 1024).toFixed(2);

    return {
        uptime: uptimeFormatted,
        memory: `${memUsage} MB`,
        platform: os.platform(),
        nodeVersion: process.version
    };
}

async function getBoxList(api) {
    try {
        const inbox = await api.getThreadList(50, null, ['INBOX']);
        return inbox.filter(group => group.isSubscribed && group.isGroup)
                   .map(group => ({
                       id: group.threadID,
                       name: group.name || "Box ch∆∞a ƒë·∫∑t t√™n",
                       participants: group.participants?.length || 0
                   }));
    } catch (error) {
        return [];
    }
}

// Smart Redkey Detection and Management Functions
function detectRedkeyRequest(message) {
    const redkeyKeywords = [
        'redkey', 'red key', 'thu√™ bot', 'thu√™ nh√≥m', 'k√≠ch ho·∫°t bot',
        'danh s√°ch nh√≥m', 'list nh√≥m', 'nh√≥m ch∆∞a redkey', 'nh√≥m ch∆∞a thu√™',
        'redkey nh√≥m n√†y', 'thu√™ nh√≥m n√†y', 'check key', 'checkkey'
    ];

    return redkeyKeywords.some(keyword => 
        message.toLowerCase().includes(keyword.toLowerCase())
    );
}

async function handleSmartRedkey(message, senderID, threadID, api, userName, models) {
    const LicenseKeys = models.use('LicenseKeys');
    const fs = require('fs');

    const messageLower = message.toLowerCase();

    try {
        // Check if user is admin for advanced operations
        const isAdminUser = isAdmin(senderID);

        // Handle "danh s√°ch nh√≥m ch∆∞a redkey" or similar
        if (messageLower.includes('danh s√°ch') && messageLower.includes('nh√≥m') && 
            (messageLower.includes('ch∆∞a redkey') || messageLower.includes('ch∆∞a thu√™'))) {

            if (!isAdminUser) {
                return {
                    handled: true,
                    message: `Xin l·ªói ${userName}, ch·ªâ admin m·ªõi c√≥ th·ªÉ xem danh s√°ch n√†y nha! T·ªõ c√≥ th·ªÉ chuy·ªÉn l·ªùi cho admin v·ªÅ vi·ªác redkey kh√¥ng? üòä`
                };
            }

            const unredeemedGroups = await getUnredeemedGroups(api, LicenseKeys);
            let response = `üìã DANH S√ÅCH NH√ìM CH∆ØA THU√ä BOT\n`;
            response += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`;

            if (unredeemedGroups.length === 0) {
                response += `üéâ T·∫•t c·∫£ nh√≥m ƒë√£ thu√™ bot r·ªìi ${userName}!\n`;
            } else {
                unredeemedGroups.slice(0, 10).forEach((group, index) => {
                    response += `${index + 1}. ${group.name}\n`;
                    response += `   üì± ID: ${group.threadID}\n`;
                    response += `   üë• ${group.participantIDs.length} th√†nh vi√™n\n\n`;
                });

                if (unredeemedGroups.length > 10) {
                    response += `... v√† ${unredeemedGroups.length - 10} nh√≥m kh√°c\n`;
                }
            }

            response += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`;
            response += `üí° Reply s·ªë th·ª© t·ª± + th·ªùi gian ƒë·ªÉ redkey\n`;
            response += `V√≠ d·ª•: "1 tu·∫ßn" ho·∫∑c "3 30 ng√†y"`;

            return { handled: true, message: response };
        }

        // Handle "redkey nh√≥m n√†y" or similar  
        if ((messageLower.includes('redkey') || messageLower.includes('thu√™')) && 
            (messageLower.includes('nh√≥m n√†y') || messageLower.includes('box n√†y'))) {

            // Check current group status
            const currentGroupLicense = await LicenseKeys.findOne({
                where: {
                    targetId: threadID,
                    keyType: 'group',
                    isActive: true,
                    remainingDays: { [require('sequelize').Op.gt]: 0 }
                }
            });

            if (currentGroupLicense) {
                return {
                    handled: true,
                    message: `${userName} √†, nh√≥m n√†y ƒë√£ thu√™ bot r·ªìi nha! üòä\n` +
                            `üÜî Key: ${currentGroupLicense.keyId.substring(0, 8)}...\n` +
                            `‚è∞ C√≤n l·∫°i: ${currentGroupLicense.remainingDays} ng√†y\n` +
                            `‚ú® T·∫•t c·∫£ t√≠nh nƒÉng ƒë√£ m·ªü kh√≥a!`
                };
            }

            if (!isAdminUser) {
                return {
                    handled: true,
                    message: `${userName} mu·ªën thu√™ bot cho nh√≥m n√†y √†? T·ªõ s·∫Ω chuy·ªÉn l·ªùi cho admin nh√©! üíï\n\n` +
                            `üìù Ghi ch√∫: Nh√≥m "${await getGroupName(api, threadID)}" c·∫ßn thu√™ bot\n` +
                            `üë§ Ng∆∞·ªùi y√™u c·∫ßu: ${userName}\n` +
                            `üì± Thread ID: ${threadID}\n\n` +
                            `Admin s·∫Ω xem v√† x·ª≠ l√Ω s·ªõm nh·∫•t c√≥ th·ªÉ! ‚ú®`
                };
            } else {
                return {
                    handled: true, 
                    message: `Admin ${userName}, c·∫≠u c√≥ th·ªÉ d√πng:\n` +
                            `‚Ä¢ \`!redkey 30 ng√†y\` ƒë·ªÉ thu√™ ngay\n` +
                            `‚Ä¢ Ho·∫∑c reply "thu√™ [s·ªë ng√†y]" ƒë·ªÉ t·ªõ x·ª≠ l√Ω! üòä`
                };
            }
        }

        // Handle numbered group redkey (from list response)
        const numberMatch = messageLower.match(/^(\d+)\s+(.*?)(?:ng√†y|tu·∫ßn|th√°ng)/);
        if (numberMatch && isAdminUser) {
            const groupIndex = parseInt(numberMatch[1]) - 1;
            const timeInput = numberMatch[2] + messageLower.match(/(ng√†y|tu·∫ßn|th√°ng)/)[1];

            const days = parseTimeInput(timeInput);
            if (days > 0) {
                const unredeemedGroups = await getUnredeemedGroups(api, LicenseKeys);
                if (groupIndex >= 0 && groupIndex < unredeemedGroups.length) {
                    const targetGroup = unredeemedGroups[groupIndex];
                    const result = await createRemoteRedkey(targetGroup.threadID, days, api, LicenseKeys, senderID);

                    return {
                        handled: true,
                        result: result.message
                    };
                }
            }
        }

        // Handle admin message relay for redkey
        if (!isAdminUser && (messageLower.includes('admin') || messageLower.includes('redkey'))) {
            // This will be handled by AI to create natural response asking admin
            return { handled: false };
        }

    } catch (error) {
        console.error('Smart Redkey Error:', error);
        return {
            handled: true,
            message: `L·ªói x·ª≠ l√Ω redkey r·ªìi ${userName}, th·ª≠ l·∫°i sau nh√©! üòÖ`
        };
    }

    return { handled: false };
}

async function getUnredeemedGroups(api, LicenseKeys) {
    try {
        // Get all active group licenses
        const activeGroupLicenses = await LicenseKeys.findAll({
            where: {
                keyType: 'group',
                isActive: true,
                remainingDays: { [require('sequelize').Op.gt]: 0 }
            }
        });

        const licensedThreadIDs = activeGroupLicenses.map(license => license.targetId);

        // Get all groups bot is in
        const allGroups = [];
        // Get all thread IDs from global data
        const threadIDs = global.data.threadID || [];

        if (threadIDs.length === 0) {
            console.log('Warning: No threadIDs found in global.data');
            return [];
        }

        for (const threadID of threadIDs.slice(0, 50)) { // Limit to avoid rate limits
            try {
                if (!licensedThreadIDs.includes(threadID)) {
                    const threadInfo = await api.getThreadInfo(threadID);
                    if (threadInfo && threadInfo.threadName) {
                        allGroups.push({
                            threadID: threadID,
                            name: threadInfo.threadName,
                            participantIDs: threadInfo.participantIDs || []
                        });
                    }
                }
            } catch (e) {
                // Skip groups that can't be accessed
                continue;
            }
        }

        return allGroups;
    } catch (error) {
        console.error('Get unredeemed groups error:', error);
        return [];
    }
}

async function getGroupName(api, threadID)
